# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '__umfpack')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('__umfpack')
    __umfpack = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('__umfpack', [dirname(__file__)])
        except ImportError:
            import __umfpack
            return __umfpack
        try:
            _mod = imp.load_module('__umfpack', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    __umfpack = swig_import_helper()
    del swig_import_helper
else:
    import __umfpack
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

UMFPACK_INFO = __umfpack.UMFPACK_INFO
UMFPACK_CONTROL = __umfpack.UMFPACK_CONTROL
UMFPACK_VERSION = __umfpack.UMFPACK_VERSION
UMFPACK_COPYRIGHT = __umfpack.UMFPACK_COPYRIGHT
UMFPACK_LICENSE_PART1 = __umfpack.UMFPACK_LICENSE_PART1
UMFPACK_LICENSE_PART2 = __umfpack.UMFPACK_LICENSE_PART2
UMFPACK_LICENSE_PART3 = __umfpack.UMFPACK_LICENSE_PART3
UMFPACK_DATE = __umfpack.UMFPACK_DATE
UMFPACK_MAIN_VERSION = __umfpack.UMFPACK_MAIN_VERSION
UMFPACK_SUB_VERSION = __umfpack.UMFPACK_SUB_VERSION
UMFPACK_SUBSUB_VERSION = __umfpack.UMFPACK_SUBSUB_VERSION
UMFPACK_VER = __umfpack.UMFPACK_VER
UMFPACK_STATUS = __umfpack.UMFPACK_STATUS
UMFPACK_NROW = __umfpack.UMFPACK_NROW
UMFPACK_NCOL = __umfpack.UMFPACK_NCOL
UMFPACK_NZ = __umfpack.UMFPACK_NZ
UMFPACK_SIZE_OF_UNIT = __umfpack.UMFPACK_SIZE_OF_UNIT
UMFPACK_SIZE_OF_INT = __umfpack.UMFPACK_SIZE_OF_INT
UMFPACK_SIZE_OF_LONG = __umfpack.UMFPACK_SIZE_OF_LONG
UMFPACK_SIZE_OF_POINTER = __umfpack.UMFPACK_SIZE_OF_POINTER
UMFPACK_SIZE_OF_ENTRY = __umfpack.UMFPACK_SIZE_OF_ENTRY
UMFPACK_NDENSE_ROW = __umfpack.UMFPACK_NDENSE_ROW
UMFPACK_NEMPTY_ROW = __umfpack.UMFPACK_NEMPTY_ROW
UMFPACK_NDENSE_COL = __umfpack.UMFPACK_NDENSE_COL
UMFPACK_NEMPTY_COL = __umfpack.UMFPACK_NEMPTY_COL
UMFPACK_SYMBOLIC_DEFRAG = __umfpack.UMFPACK_SYMBOLIC_DEFRAG
UMFPACK_SYMBOLIC_PEAK_MEMORY = __umfpack.UMFPACK_SYMBOLIC_PEAK_MEMORY
UMFPACK_SYMBOLIC_SIZE = __umfpack.UMFPACK_SYMBOLIC_SIZE
UMFPACK_SYMBOLIC_TIME = __umfpack.UMFPACK_SYMBOLIC_TIME
UMFPACK_SYMBOLIC_WALLTIME = __umfpack.UMFPACK_SYMBOLIC_WALLTIME
UMFPACK_STRATEGY_USED = __umfpack.UMFPACK_STRATEGY_USED
UMFPACK_ORDERING_USED = __umfpack.UMFPACK_ORDERING_USED
UMFPACK_QFIXED = __umfpack.UMFPACK_QFIXED
UMFPACK_DIAG_PREFERRED = __umfpack.UMFPACK_DIAG_PREFERRED
UMFPACK_PATTERN_SYMMETRY = __umfpack.UMFPACK_PATTERN_SYMMETRY
UMFPACK_NZ_A_PLUS_AT = __umfpack.UMFPACK_NZ_A_PLUS_AT
UMFPACK_NZDIAG = __umfpack.UMFPACK_NZDIAG
UMFPACK_SYMMETRIC_LUNZ = __umfpack.UMFPACK_SYMMETRIC_LUNZ
UMFPACK_SYMMETRIC_FLOPS = __umfpack.UMFPACK_SYMMETRIC_FLOPS
UMFPACK_SYMMETRIC_NDENSE = __umfpack.UMFPACK_SYMMETRIC_NDENSE
UMFPACK_SYMMETRIC_DMAX = __umfpack.UMFPACK_SYMMETRIC_DMAX
UMFPACK_2BY2_NWEAK = __umfpack.UMFPACK_2BY2_NWEAK
UMFPACK_2BY2_UNMATCHED = __umfpack.UMFPACK_2BY2_UNMATCHED
UMFPACK_2BY2_PATTERN_SYMMETRY = __umfpack.UMFPACK_2BY2_PATTERN_SYMMETRY
UMFPACK_2BY2_NZ_PA_PLUS_PAT = __umfpack.UMFPACK_2BY2_NZ_PA_PLUS_PAT
UMFPACK_2BY2_NZDIAG = __umfpack.UMFPACK_2BY2_NZDIAG
UMFPACK_COL_SINGLETONS = __umfpack.UMFPACK_COL_SINGLETONS
UMFPACK_ROW_SINGLETONS = __umfpack.UMFPACK_ROW_SINGLETONS
UMFPACK_N2 = __umfpack.UMFPACK_N2
UMFPACK_S_SYMMETRIC = __umfpack.UMFPACK_S_SYMMETRIC
UMFPACK_NUMERIC_SIZE_ESTIMATE = __umfpack.UMFPACK_NUMERIC_SIZE_ESTIMATE
UMFPACK_PEAK_MEMORY_ESTIMATE = __umfpack.UMFPACK_PEAK_MEMORY_ESTIMATE
UMFPACK_FLOPS_ESTIMATE = __umfpack.UMFPACK_FLOPS_ESTIMATE
UMFPACK_LNZ_ESTIMATE = __umfpack.UMFPACK_LNZ_ESTIMATE
UMFPACK_UNZ_ESTIMATE = __umfpack.UMFPACK_UNZ_ESTIMATE
UMFPACK_VARIABLE_INIT_ESTIMATE = __umfpack.UMFPACK_VARIABLE_INIT_ESTIMATE
UMFPACK_VARIABLE_PEAK_ESTIMATE = __umfpack.UMFPACK_VARIABLE_PEAK_ESTIMATE
UMFPACK_VARIABLE_FINAL_ESTIMATE = __umfpack.UMFPACK_VARIABLE_FINAL_ESTIMATE
UMFPACK_MAX_FRONT_SIZE_ESTIMATE = __umfpack.UMFPACK_MAX_FRONT_SIZE_ESTIMATE
UMFPACK_MAX_FRONT_NROWS_ESTIMATE = __umfpack.UMFPACK_MAX_FRONT_NROWS_ESTIMATE
UMFPACK_MAX_FRONT_NCOLS_ESTIMATE = __umfpack.UMFPACK_MAX_FRONT_NCOLS_ESTIMATE
UMFPACK_NUMERIC_SIZE = __umfpack.UMFPACK_NUMERIC_SIZE
UMFPACK_PEAK_MEMORY = __umfpack.UMFPACK_PEAK_MEMORY
UMFPACK_FLOPS = __umfpack.UMFPACK_FLOPS
UMFPACK_LNZ = __umfpack.UMFPACK_LNZ
UMFPACK_UNZ = __umfpack.UMFPACK_UNZ
UMFPACK_VARIABLE_INIT = __umfpack.UMFPACK_VARIABLE_INIT
UMFPACK_VARIABLE_PEAK = __umfpack.UMFPACK_VARIABLE_PEAK
UMFPACK_VARIABLE_FINAL = __umfpack.UMFPACK_VARIABLE_FINAL
UMFPACK_MAX_FRONT_SIZE = __umfpack.UMFPACK_MAX_FRONT_SIZE
UMFPACK_MAX_FRONT_NROWS = __umfpack.UMFPACK_MAX_FRONT_NROWS
UMFPACK_MAX_FRONT_NCOLS = __umfpack.UMFPACK_MAX_FRONT_NCOLS
UMFPACK_NUMERIC_DEFRAG = __umfpack.UMFPACK_NUMERIC_DEFRAG
UMFPACK_NUMERIC_REALLOC = __umfpack.UMFPACK_NUMERIC_REALLOC
UMFPACK_NUMERIC_COSTLY_REALLOC = __umfpack.UMFPACK_NUMERIC_COSTLY_REALLOC
UMFPACK_COMPRESSED_PATTERN = __umfpack.UMFPACK_COMPRESSED_PATTERN
UMFPACK_LU_ENTRIES = __umfpack.UMFPACK_LU_ENTRIES
UMFPACK_NUMERIC_TIME = __umfpack.UMFPACK_NUMERIC_TIME
UMFPACK_UDIAG_NZ = __umfpack.UMFPACK_UDIAG_NZ
UMFPACK_RCOND = __umfpack.UMFPACK_RCOND
UMFPACK_WAS_SCALED = __umfpack.UMFPACK_WAS_SCALED
UMFPACK_RSMIN = __umfpack.UMFPACK_RSMIN
UMFPACK_RSMAX = __umfpack.UMFPACK_RSMAX
UMFPACK_UMIN = __umfpack.UMFPACK_UMIN
UMFPACK_UMAX = __umfpack.UMFPACK_UMAX
UMFPACK_ALLOC_INIT_USED = __umfpack.UMFPACK_ALLOC_INIT_USED
UMFPACK_FORCED_UPDATES = __umfpack.UMFPACK_FORCED_UPDATES
UMFPACK_NUMERIC_WALLTIME = __umfpack.UMFPACK_NUMERIC_WALLTIME
UMFPACK_NOFF_DIAG = __umfpack.UMFPACK_NOFF_DIAG
UMFPACK_ALL_LNZ = __umfpack.UMFPACK_ALL_LNZ
UMFPACK_ALL_UNZ = __umfpack.UMFPACK_ALL_UNZ
UMFPACK_NZDROPPED = __umfpack.UMFPACK_NZDROPPED
UMFPACK_IR_TAKEN = __umfpack.UMFPACK_IR_TAKEN
UMFPACK_IR_ATTEMPTED = __umfpack.UMFPACK_IR_ATTEMPTED
UMFPACK_OMEGA1 = __umfpack.UMFPACK_OMEGA1
UMFPACK_OMEGA2 = __umfpack.UMFPACK_OMEGA2
UMFPACK_SOLVE_FLOPS = __umfpack.UMFPACK_SOLVE_FLOPS
UMFPACK_SOLVE_TIME = __umfpack.UMFPACK_SOLVE_TIME
UMFPACK_SOLVE_WALLTIME = __umfpack.UMFPACK_SOLVE_WALLTIME
UMFPACK_ORDERING_COLAMD = __umfpack.UMFPACK_ORDERING_COLAMD
UMFPACK_ORDERING_AMD = __umfpack.UMFPACK_ORDERING_AMD
UMFPACK_ORDERING_GIVEN = __umfpack.UMFPACK_ORDERING_GIVEN
UMFPACK_PRL = __umfpack.UMFPACK_PRL
UMFPACK_DENSE_ROW = __umfpack.UMFPACK_DENSE_ROW
UMFPACK_DENSE_COL = __umfpack.UMFPACK_DENSE_COL
UMFPACK_BLOCK_SIZE = __umfpack.UMFPACK_BLOCK_SIZE
UMFPACK_STRATEGY = __umfpack.UMFPACK_STRATEGY
UMFPACK_2BY2_TOLERANCE = __umfpack.UMFPACK_2BY2_TOLERANCE
UMFPACK_FIXQ = __umfpack.UMFPACK_FIXQ
UMFPACK_AMD_DENSE = __umfpack.UMFPACK_AMD_DENSE
UMFPACK_AGGRESSIVE = __umfpack.UMFPACK_AGGRESSIVE
UMFPACK_PIVOT_TOLERANCE = __umfpack.UMFPACK_PIVOT_TOLERANCE
UMFPACK_ALLOC_INIT = __umfpack.UMFPACK_ALLOC_INIT
UMFPACK_SYM_PIVOT_TOLERANCE = __umfpack.UMFPACK_SYM_PIVOT_TOLERANCE
UMFPACK_SCALE = __umfpack.UMFPACK_SCALE
UMFPACK_FRONT_ALLOC_INIT = __umfpack.UMFPACK_FRONT_ALLOC_INIT
UMFPACK_DROPTOL = __umfpack.UMFPACK_DROPTOL
UMFPACK_IRSTEP = __umfpack.UMFPACK_IRSTEP
UMFPACK_COMPILED_WITH_BLAS = __umfpack.UMFPACK_COMPILED_WITH_BLAS
UMFPACK_COMPILED_FOR_MATLAB = __umfpack.UMFPACK_COMPILED_FOR_MATLAB
UMFPACK_COMPILED_WITH_GETRUSAGE = __umfpack.UMFPACK_COMPILED_WITH_GETRUSAGE
UMFPACK_COMPILED_IN_DEBUG_MODE = __umfpack.UMFPACK_COMPILED_IN_DEBUG_MODE
UMFPACK_STRATEGY_AUTO = __umfpack.UMFPACK_STRATEGY_AUTO
UMFPACK_STRATEGY_UNSYMMETRIC = __umfpack.UMFPACK_STRATEGY_UNSYMMETRIC
UMFPACK_STRATEGY_2BY2 = __umfpack.UMFPACK_STRATEGY_2BY2
UMFPACK_STRATEGY_SYMMETRIC = __umfpack.UMFPACK_STRATEGY_SYMMETRIC
UMFPACK_SCALE_NONE = __umfpack.UMFPACK_SCALE_NONE
UMFPACK_SCALE_SUM = __umfpack.UMFPACK_SCALE_SUM
UMFPACK_SCALE_MAX = __umfpack.UMFPACK_SCALE_MAX
UMFPACK_DEFAULT_PRL = __umfpack.UMFPACK_DEFAULT_PRL
UMFPACK_DEFAULT_DENSE_ROW = __umfpack.UMFPACK_DEFAULT_DENSE_ROW
UMFPACK_DEFAULT_DENSE_COL = __umfpack.UMFPACK_DEFAULT_DENSE_COL
UMFPACK_DEFAULT_PIVOT_TOLERANCE = __umfpack.UMFPACK_DEFAULT_PIVOT_TOLERANCE
UMFPACK_DEFAULT_2BY2_TOLERANCE = __umfpack.UMFPACK_DEFAULT_2BY2_TOLERANCE
UMFPACK_DEFAULT_SYM_PIVOT_TOLERANCE = __umfpack.UMFPACK_DEFAULT_SYM_PIVOT_TOLERANCE
UMFPACK_DEFAULT_BLOCK_SIZE = __umfpack.UMFPACK_DEFAULT_BLOCK_SIZE
UMFPACK_DEFAULT_ALLOC_INIT = __umfpack.UMFPACK_DEFAULT_ALLOC_INIT
UMFPACK_DEFAULT_FRONT_ALLOC_INIT = __umfpack.UMFPACK_DEFAULT_FRONT_ALLOC_INIT
UMFPACK_DEFAULT_IRSTEP = __umfpack.UMFPACK_DEFAULT_IRSTEP
UMFPACK_DEFAULT_SCALE = __umfpack.UMFPACK_DEFAULT_SCALE
UMFPACK_DEFAULT_STRATEGY = __umfpack.UMFPACK_DEFAULT_STRATEGY
UMFPACK_DEFAULT_FIXQ = __umfpack.UMFPACK_DEFAULT_FIXQ
UMFPACK_DEFAULT_AGGRESSIVE = __umfpack.UMFPACK_DEFAULT_AGGRESSIVE
UMFPACK_DEFAULT_DROPTOL = __umfpack.UMFPACK_DEFAULT_DROPTOL
UMFPACK_OK = __umfpack.UMFPACK_OK
UMFPACK_WARNING_singular_matrix = __umfpack.UMFPACK_WARNING_singular_matrix
UMFPACK_WARNING_determinant_underflow = __umfpack.UMFPACK_WARNING_determinant_underflow
UMFPACK_WARNING_determinant_overflow = __umfpack.UMFPACK_WARNING_determinant_overflow
UMFPACK_ERROR_out_of_memory = __umfpack.UMFPACK_ERROR_out_of_memory
UMFPACK_ERROR_invalid_Numeric_object = __umfpack.UMFPACK_ERROR_invalid_Numeric_object
UMFPACK_ERROR_invalid_Symbolic_object = __umfpack.UMFPACK_ERROR_invalid_Symbolic_object
UMFPACK_ERROR_argument_missing = __umfpack.UMFPACK_ERROR_argument_missing
UMFPACK_ERROR_n_nonpositive = __umfpack.UMFPACK_ERROR_n_nonpositive
UMFPACK_ERROR_invalid_matrix = __umfpack.UMFPACK_ERROR_invalid_matrix
UMFPACK_ERROR_different_pattern = __umfpack.UMFPACK_ERROR_different_pattern
UMFPACK_ERROR_invalid_system = __umfpack.UMFPACK_ERROR_invalid_system
UMFPACK_ERROR_invalid_permutation = __umfpack.UMFPACK_ERROR_invalid_permutation
UMFPACK_ERROR_internal_error = __umfpack.UMFPACK_ERROR_internal_error
UMFPACK_ERROR_file_IO = __umfpack.UMFPACK_ERROR_file_IO
UMFPACK_A = __umfpack.UMFPACK_A
UMFPACK_At = __umfpack.UMFPACK_At
UMFPACK_Aat = __umfpack.UMFPACK_Aat
UMFPACK_Pt_L = __umfpack.UMFPACK_Pt_L
UMFPACK_L = __umfpack.UMFPACK_L
UMFPACK_Lt_P = __umfpack.UMFPACK_Lt_P
UMFPACK_Lat_P = __umfpack.UMFPACK_Lat_P
UMFPACK_Lt = __umfpack.UMFPACK_Lt
UMFPACK_Lat = __umfpack.UMFPACK_Lat
UMFPACK_U_Qt = __umfpack.UMFPACK_U_Qt
UMFPACK_U = __umfpack.UMFPACK_U
UMFPACK_Q_Ut = __umfpack.UMFPACK_Q_Ut
UMFPACK_Q_Uat = __umfpack.UMFPACK_Q_Uat
UMFPACK_Ut = __umfpack.UMFPACK_Ut
UMFPACK_Uat = __umfpack.UMFPACK_Uat

def umfpack_di_solve(sys, Ap, Ai, Ax, X, B, Numeric, Control, Info):
    """umfpack_di_solve(int sys, int const [] Ap, int const [] Ai, double const [] Ax, double [] X, double const [] B, void * Numeric, double const [20] Control, double [90] Info) -> int"""
    return __umfpack.umfpack_di_solve(sys, Ap, Ai, Ax, X, B, Numeric, Control, Info)

def umfpack_dl_solve(sys, Ap, Ai, Ax, X, B, Numeric, Control, Info):
    """umfpack_dl_solve(UF_long sys, UF_long const [] Ap, UF_long const [] Ai, double const [] Ax, double [] X, double const [] B, void * Numeric, double const [20] Control, double [90] Info) -> UF_long"""
    return __umfpack.umfpack_dl_solve(sys, Ap, Ai, Ax, X, B, Numeric, Control, Info)

def umfpack_zi_solve(sys, Ap, Ai, Ax, Az, Xx, Xz, Bx, Bz, Numeric, Control, Info):
    """umfpack_zi_solve(int sys, int const [] Ap, int const [] Ai, double const [] Ax, double const [] Az, double [] Xx, double [] Xz, double const [] Bx, double const [] Bz, void * Numeric, double const [20] Control, double [90] Info) -> int"""
    return __umfpack.umfpack_zi_solve(sys, Ap, Ai, Ax, Az, Xx, Xz, Bx, Bz, Numeric, Control, Info)

def umfpack_zl_solve(sys, Ap, Ai, Ax, Az, Xx, Xz, Bx, Bz, Numeric, Control, Info):
    """umfpack_zl_solve(UF_long sys, UF_long const [] Ap, UF_long const [] Ai, double const [] Ax, double const [] Az, double [] Xx, double [] Xz, double const [] Bx, double const [] Bz, void * Numeric, double const [20] Control, double [90] Info) -> UF_long"""
    return __umfpack.umfpack_zl_solve(sys, Ap, Ai, Ax, Az, Xx, Xz, Bx, Bz, Numeric, Control, Info)

def umfpack_di_defaults(Control):
    """umfpack_di_defaults(double [20] Control)"""
    return __umfpack.umfpack_di_defaults(Control)

def umfpack_dl_defaults(Control):
    """umfpack_dl_defaults(double [20] Control)"""
    return __umfpack.umfpack_dl_defaults(Control)

def umfpack_zi_defaults(Control):
    """umfpack_zi_defaults(double [20] Control)"""
    return __umfpack.umfpack_zi_defaults(Control)

def umfpack_zl_defaults(Control):
    """umfpack_zl_defaults(double [20] Control)"""
    return __umfpack.umfpack_zl_defaults(Control)

def umfpack_di_triplet_to_col(n_row, n_col, nz, Ti, Tj, Tx, Ap, Ai, Ax, Map):
    """umfpack_di_triplet_to_col(int n_row, int n_col, int nz, int const [] Ti, int const [] Tj, double const [] Tx, int [] Ap, int [] Ai, double [] Ax, int [] Map) -> int"""
    return __umfpack.umfpack_di_triplet_to_col(n_row, n_col, nz, Ti, Tj, Tx, Ap, Ai, Ax, Map)

def umfpack_dl_triplet_to_col(n_row, n_col, nz, Ti, Tj, Tx, Ap, Ai, Ax, Map):
    """umfpack_dl_triplet_to_col(UF_long n_row, UF_long n_col, UF_long nz, UF_long const [] Ti, UF_long const [] Tj, double const [] Tx, UF_long [] Ap, UF_long [] Ai, double [] Ax, UF_long [] Map) -> UF_long"""
    return __umfpack.umfpack_dl_triplet_to_col(n_row, n_col, nz, Ti, Tj, Tx, Ap, Ai, Ax, Map)

def umfpack_zi_triplet_to_col(n_row, n_col, nz, Ti, Tj, Tx, Tz, Ap, Ai, Ax, Az, Map):
    """umfpack_zi_triplet_to_col(int n_row, int n_col, int nz, int const [] Ti, int const [] Tj, double const [] Tx, double const [] Tz, int [] Ap, int [] Ai, double [] Ax, double [] Az, int [] Map) -> int"""
    return __umfpack.umfpack_zi_triplet_to_col(n_row, n_col, nz, Ti, Tj, Tx, Tz, Ap, Ai, Ax, Az, Map)

def umfpack_zl_triplet_to_col(n_row, n_col, nz, Ti, Tj, Tx, Tz, Ap, Ai, Ax, Az, Map):
    """umfpack_zl_triplet_to_col(UF_long n_row, UF_long n_col, UF_long nz, UF_long const [] Ti, UF_long const [] Tj, double const [] Tx, double const [] Tz, UF_long [] Ap, UF_long [] Ai, double [] Ax, double [] Az, UF_long [] Map) -> UF_long"""
    return __umfpack.umfpack_zl_triplet_to_col(n_row, n_col, nz, Ti, Tj, Tx, Tz, Ap, Ai, Ax, Az, Map)

def umfpack_di_col_to_triplet(n_col, Ap, Tj):
    """umfpack_di_col_to_triplet(int n_col, int const [] Ap, int [] Tj) -> int"""
    return __umfpack.umfpack_di_col_to_triplet(n_col, Ap, Tj)

def umfpack_dl_col_to_triplet(n_col, Ap, Tj):
    """umfpack_dl_col_to_triplet(UF_long n_col, UF_long const [] Ap, UF_long [] Tj) -> UF_long"""
    return __umfpack.umfpack_dl_col_to_triplet(n_col, Ap, Tj)

def umfpack_zi_col_to_triplet(n_col, Ap, Tj):
    """umfpack_zi_col_to_triplet(int n_col, int const [] Ap, int [] Tj) -> int"""
    return __umfpack.umfpack_zi_col_to_triplet(n_col, Ap, Tj)

def umfpack_zl_col_to_triplet(n_col, Ap, Tj):
    """umfpack_zl_col_to_triplet(UF_long n_col, UF_long const [] Ap, UF_long [] Tj) -> UF_long"""
    return __umfpack.umfpack_zl_col_to_triplet(n_col, Ap, Tj)

def umfpack_di_transpose(n_row, n_col, Ap, Ai, Ax, P, Q, Rp, Ri, Rx):
    """umfpack_di_transpose(int n_row, int n_col, int const [] Ap, int const [] Ai, double const [] Ax, int const [] P, int const [] Q, int [] Rp, int [] Ri, double [] Rx) -> int"""
    return __umfpack.umfpack_di_transpose(n_row, n_col, Ap, Ai, Ax, P, Q, Rp, Ri, Rx)

def umfpack_dl_transpose(n_row, n_col, Ap, Ai, Ax, P, Q, Rp, Ri, Rx):
    """umfpack_dl_transpose(UF_long n_row, UF_long n_col, UF_long const [] Ap, UF_long const [] Ai, double const [] Ax, UF_long const [] P, UF_long const [] Q, UF_long [] Rp, UF_long [] Ri, double [] Rx) -> UF_long"""
    return __umfpack.umfpack_dl_transpose(n_row, n_col, Ap, Ai, Ax, P, Q, Rp, Ri, Rx)

def umfpack_zi_transpose(n_row, n_col, Ap, Ai, Ax, Az, P, Q, Rp, Ri, Rx, Rz, do_conjugate):
    """umfpack_zi_transpose(int n_row, int n_col, int const [] Ap, int const [] Ai, double const [] Ax, double const [] Az, int const [] P, int const [] Q, int [] Rp, int [] Ri, double [] Rx, double [] Rz, int do_conjugate) -> int"""
    return __umfpack.umfpack_zi_transpose(n_row, n_col, Ap, Ai, Ax, Az, P, Q, Rp, Ri, Rx, Rz, do_conjugate)

def umfpack_zl_transpose(n_row, n_col, Ap, Ai, Ax, Az, P, Q, Rp, Ri, Rx, Rz, do_conjugate):
    """umfpack_zl_transpose(UF_long n_row, UF_long n_col, UF_long const [] Ap, UF_long const [] Ai, double const [] Ax, double const [] Az, UF_long const [] P, UF_long const [] Q, UF_long [] Rp, UF_long [] Ri, double [] Rx, double [] Rz, UF_long do_conjugate) -> UF_long"""
    return __umfpack.umfpack_zl_transpose(n_row, n_col, Ap, Ai, Ax, Az, P, Q, Rp, Ri, Rx, Rz, do_conjugate)

def umfpack_di_scale(X, B, Numeric):
    """umfpack_di_scale(double [] X, double const [] B, void * Numeric) -> int"""
    return __umfpack.umfpack_di_scale(X, B, Numeric)

def umfpack_dl_scale(X, B, Numeric):
    """umfpack_dl_scale(double [] X, double const [] B, void * Numeric) -> UF_long"""
    return __umfpack.umfpack_dl_scale(X, B, Numeric)

def umfpack_zi_scale(Xx, Xz, Bx, Bz, Numeric):
    """umfpack_zi_scale(double [] Xx, double [] Xz, double const [] Bx, double const [] Bz, void * Numeric) -> int"""
    return __umfpack.umfpack_zi_scale(Xx, Xz, Bx, Bz, Numeric)

def umfpack_zl_scale(Xx, Xz, Bx, Bz, Numeric):
    """umfpack_zl_scale(double [] Xx, double [] Xz, double const [] Bx, double const [] Bz, void * Numeric) -> UF_long"""
    return __umfpack.umfpack_zl_scale(Xx, Xz, Bx, Bz, Numeric)

def umfpack_di_report_symbolic(Symbolic, Control):
    """umfpack_di_report_symbolic(void * Symbolic, double const [20] Control) -> int"""
    return __umfpack.umfpack_di_report_symbolic(Symbolic, Control)

def umfpack_dl_report_symbolic(Symbolic, Control):
    """umfpack_dl_report_symbolic(void * Symbolic, double const [20] Control) -> UF_long"""
    return __umfpack.umfpack_dl_report_symbolic(Symbolic, Control)

def umfpack_zi_report_symbolic(Symbolic, Control):
    """umfpack_zi_report_symbolic(void * Symbolic, double const [20] Control) -> int"""
    return __umfpack.umfpack_zi_report_symbolic(Symbolic, Control)

def umfpack_zl_report_symbolic(Symbolic, Control):
    """umfpack_zl_report_symbolic(void * Symbolic, double const [20] Control) -> UF_long"""
    return __umfpack.umfpack_zl_report_symbolic(Symbolic, Control)

def umfpack_di_report_numeric(Numeric, Control):
    """umfpack_di_report_numeric(void * Numeric, double const [20] Control) -> int"""
    return __umfpack.umfpack_di_report_numeric(Numeric, Control)

def umfpack_dl_report_numeric(Numeric, Control):
    """umfpack_dl_report_numeric(void * Numeric, double const [20] Control) -> UF_long"""
    return __umfpack.umfpack_dl_report_numeric(Numeric, Control)

def umfpack_zi_report_numeric(Numeric, Control):
    """umfpack_zi_report_numeric(void * Numeric, double const [20] Control) -> int"""
    return __umfpack.umfpack_zi_report_numeric(Numeric, Control)

def umfpack_zl_report_numeric(Numeric, Control):
    """umfpack_zl_report_numeric(void * Numeric, double const [20] Control) -> UF_long"""
    return __umfpack.umfpack_zl_report_numeric(Numeric, Control)

def umfpack_di_report_info(Control, Info):
    """umfpack_di_report_info(double const [20] Control, double const [90] Info)"""
    return __umfpack.umfpack_di_report_info(Control, Info)

def umfpack_dl_report_info(Control, Info):
    """umfpack_dl_report_info(double const [20] Control, double const [90] Info)"""
    return __umfpack.umfpack_dl_report_info(Control, Info)

def umfpack_zi_report_info(Control, Info):
    """umfpack_zi_report_info(double const [20] Control, double const [90] Info)"""
    return __umfpack.umfpack_zi_report_info(Control, Info)

def umfpack_zl_report_info(Control, Info):
    """umfpack_zl_report_info(double const [20] Control, double const [90] Info)"""
    return __umfpack.umfpack_zl_report_info(Control, Info)

def umfpack_di_report_control(Control):
    """umfpack_di_report_control(double const [20] Control)"""
    return __umfpack.umfpack_di_report_control(Control)

def umfpack_dl_report_control(Control):
    """umfpack_dl_report_control(double const [20] Control)"""
    return __umfpack.umfpack_dl_report_control(Control)

def umfpack_zi_report_control(Control):
    """umfpack_zi_report_control(double const [20] Control)"""
    return __umfpack.umfpack_zi_report_control(Control)

def umfpack_zl_report_control(Control):
    """umfpack_zl_report_control(double const [20] Control)"""
    return __umfpack.umfpack_zl_report_control(Control)

def umfpack_di_symbolic(n_row, n_col, Ap, Ai, Ax, Control, Info):
    """umfpack_di_symbolic(int n_row, int n_col, int const [] Ap, int const [] Ai, double const [] Ax, double const [20] Control, double [90] Info) -> int"""
    return __umfpack.umfpack_di_symbolic(n_row, n_col, Ap, Ai, Ax, Control, Info)

def umfpack_dl_symbolic(n_row, n_col, Ap, Ai, Ax, Control, Info):
    """umfpack_dl_symbolic(UF_long n_row, UF_long n_col, UF_long const [] Ap, UF_long const [] Ai, double const [] Ax, double const [20] Control, double [90] Info) -> UF_long"""
    return __umfpack.umfpack_dl_symbolic(n_row, n_col, Ap, Ai, Ax, Control, Info)

def umfpack_zi_symbolic(n_row, n_col, Ap, Ai, Ax, Az, Control, Info):
    """umfpack_zi_symbolic(int n_row, int n_col, int const [] Ap, int const [] Ai, double const [] Ax, double const [] Az, double const [20] Control, double [90] Info) -> int"""
    return __umfpack.umfpack_zi_symbolic(n_row, n_col, Ap, Ai, Ax, Az, Control, Info)

def umfpack_zl_symbolic(n_row, n_col, Ap, Ai, Ax, Az, Control, Info):
    """umfpack_zl_symbolic(UF_long n_row, UF_long n_col, UF_long const [] Ap, UF_long const [] Ai, double const [] Ax, double const [] Az, double const [20] Control, double [90] Info) -> UF_long"""
    return __umfpack.umfpack_zl_symbolic(n_row, n_col, Ap, Ai, Ax, Az, Control, Info)

def umfpack_di_numeric(Ap, Ai, Ax, Symbolic, Control, Info):
    """umfpack_di_numeric(int const [] Ap, int const [] Ai, double const [] Ax, void * Symbolic, double const [20] Control, double [90] Info) -> int"""
    return __umfpack.umfpack_di_numeric(Ap, Ai, Ax, Symbolic, Control, Info)

def umfpack_dl_numeric(Ap, Ai, Ax, Symbolic, Control, Info):
    """umfpack_dl_numeric(UF_long const [] Ap, UF_long const [] Ai, double const [] Ax, void * Symbolic, double const [20] Control, double [90] Info) -> UF_long"""
    return __umfpack.umfpack_dl_numeric(Ap, Ai, Ax, Symbolic, Control, Info)

def umfpack_zi_numeric(Ap, Ai, Ax, Az, Symbolic, Control, Info):
    """umfpack_zi_numeric(int const [] Ap, int const [] Ai, double const [] Ax, double const [] Az, void * Symbolic, double const [20] Control, double [90] Info) -> int"""
    return __umfpack.umfpack_zi_numeric(Ap, Ai, Ax, Az, Symbolic, Control, Info)

def umfpack_zl_numeric(Ap, Ai, Ax, Az, Symbolic, Control, Info):
    """umfpack_zl_numeric(UF_long const [] Ap, UF_long const [] Ai, double const [] Ax, double const [] Az, void * Symbolic, double const [20] Control, double [90] Info) -> UF_long"""
    return __umfpack.umfpack_zl_numeric(Ap, Ai, Ax, Az, Symbolic, Control, Info)

def umfpack_di_free_symbolic(Symbolic):
    """umfpack_di_free_symbolic(void ** Symbolic)"""
    return __umfpack.umfpack_di_free_symbolic(Symbolic)

def umfpack_dl_free_symbolic(Symbolic):
    """umfpack_dl_free_symbolic(void ** Symbolic)"""
    return __umfpack.umfpack_dl_free_symbolic(Symbolic)

def umfpack_zi_free_symbolic(Symbolic):
    """umfpack_zi_free_symbolic(void ** Symbolic)"""
    return __umfpack.umfpack_zi_free_symbolic(Symbolic)

def umfpack_zl_free_symbolic(Symbolic):
    """umfpack_zl_free_symbolic(void ** Symbolic)"""
    return __umfpack.umfpack_zl_free_symbolic(Symbolic)

def umfpack_di_free_numeric(Numeric):
    """umfpack_di_free_numeric(void ** Numeric)"""
    return __umfpack.umfpack_di_free_numeric(Numeric)

def umfpack_dl_free_numeric(Numeric):
    """umfpack_dl_free_numeric(void ** Numeric)"""
    return __umfpack.umfpack_dl_free_numeric(Numeric)

def umfpack_zi_free_numeric(Numeric):
    """umfpack_zi_free_numeric(void ** Numeric)"""
    return __umfpack.umfpack_zi_free_numeric(Numeric)

def umfpack_zl_free_numeric(Numeric):
    """umfpack_zl_free_numeric(void ** Numeric)"""
    return __umfpack.umfpack_zl_free_numeric(Numeric)

def umfpack_di_get_lunz(Numeric):
    """umfpack_di_get_lunz(void * Numeric) -> int"""
    return __umfpack.umfpack_di_get_lunz(Numeric)

def umfpack_dl_get_lunz(Numeric):
    """umfpack_dl_get_lunz(void * Numeric) -> UF_long"""
    return __umfpack.umfpack_dl_get_lunz(Numeric)

def umfpack_zi_get_lunz(Numeric):
    """umfpack_zi_get_lunz(void * Numeric) -> int"""
    return __umfpack.umfpack_zi_get_lunz(Numeric)

def umfpack_zl_get_lunz(Numeric):
    """umfpack_zl_get_lunz(void * Numeric) -> UF_long"""
    return __umfpack.umfpack_zl_get_lunz(Numeric)

def umfpack_di_get_numeric(Lp, Lj, Lx, Up, Ui, Ux, P, Q, Dx, Rs, Numeric):
    """umfpack_di_get_numeric(int [] Lp, int [] Lj, double [] Lx, int [] Up, int [] Ui, double [] Ux, int [] P, int [] Q, double [] Dx, double [] Rs, void * Numeric) -> int"""
    return __umfpack.umfpack_di_get_numeric(Lp, Lj, Lx, Up, Ui, Ux, P, Q, Dx, Rs, Numeric)

def umfpack_dl_get_numeric(Lp, Lj, Lx, Up, Ui, Ux, P, Q, Dx, Rs, Numeric):
    """umfpack_dl_get_numeric(UF_long [] Lp, UF_long [] Lj, double [] Lx, UF_long [] Up, UF_long [] Ui, double [] Ux, UF_long [] P, UF_long [] Q, double [] Dx, double [] Rs, void * Numeric) -> UF_long"""
    return __umfpack.umfpack_dl_get_numeric(Lp, Lj, Lx, Up, Ui, Ux, P, Q, Dx, Rs, Numeric)

def umfpack_zi_get_numeric(Lp, Lj, Lx, Lz, Up, Ui, Ux, Uz, P, Q, Dx, Dz, Rs, Numeric):
    """umfpack_zi_get_numeric(int [] Lp, int [] Lj, double [] Lx, double [] Lz, int [] Up, int [] Ui, double [] Ux, double [] Uz, int [] P, int [] Q, double [] Dx, double [] Dz, double [] Rs, void * Numeric) -> int"""
    return __umfpack.umfpack_zi_get_numeric(Lp, Lj, Lx, Lz, Up, Ui, Ux, Uz, P, Q, Dx, Dz, Rs, Numeric)

def umfpack_zl_get_numeric(Lp, Lj, Lx, Lz, Up, Ui, Ux, Uz, P, Q, Dx, Dz, Rs, Numeric):
    """umfpack_zl_get_numeric(UF_long [] Lp, UF_long [] Lj, double [] Lx, double [] Lz, UF_long [] Up, UF_long [] Ui, double [] Ux, double [] Uz, UF_long [] P, UF_long [] Q, double [] Dx, double [] Dz, double [] Rs, void * Numeric) -> UF_long"""
    return __umfpack.umfpack_zl_get_numeric(Lp, Lj, Lx, Lz, Up, Ui, Ux, Uz, P, Q, Dx, Dz, Rs, Numeric)
# This file is compatible with both classic and new-style classes.


